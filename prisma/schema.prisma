
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entries       Entry[]
  products      UserProduct[]  
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Entry {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       DateTime      @default(now())
  products   EntryProduct[]
  breakouts  Breakout[]
  foods      FoodEaten[]
  
  @@map("entries")
}

model Product {
  id       String         @id @default(cuid())
  name     String
  users    UserProduct[]  // many-to-many with User
  entries  EntryProduct[] // many-to-many with Entry
}

enum ProductStatus {
  CURRENT
  TRIED
  WANT_TO_TRY
}

model UserProduct {
  id        String        @id @default(cuid())
  userId    String
  productId String
  status    ProductStatus @default(CURRENT)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model EntryProduct {
  id        String    @id @default(cuid())
  entryId   String
  productId String
  area      String?
  timeOfDay TimeOfDay

  entry   Entry   @relation(fields: [entryId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([entryId, productId])
}

model Breakout {
  id         String   @id @default(cuid())
  entryId    String
  entry      Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  label      String   // e.g., "whitehead", "cyst"
  x          Float
  y          Float

  @@map("breakouts")
}

model FoodEaten {
  id         String   @id @default(cuid())
  entryId    String
  entry      Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  foodItem   String
  notes      String?

  @@map("foods_eaten")
}

enum TimeOfDay {
  am
  pm
}